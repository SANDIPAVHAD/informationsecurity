// Name: Sandip Pandharinath Avhad
// Roll No:COTC02

// Code:
// / C program for RSA asymmetric cryptographic
// algorithm. For demonstration values are
// relatively small compared to practical
// application
#include <stdio.h>
//using namespace std;

// Returns gcd of a and b
int gcd(int a, int h)
{
	int temp;
	while (1) {
		temp = a % h;
		if (temp == 0)
			return h;
		a = h;
		h = temp;
	}
}

// Code to demonstrate RSA algorithm
int main()
{
	// Two random prime numbers
	double p = 5;
	double q = 11;
    printf("\np=%lf",p);
    printf("\nq=%lf",q);
	// First part of public key:
	double n = p * q;
	printf("\nn=%lf",n);

	// Finding other part of public key.
	// e stands for encrypt
	double e = 2;
	double phi = (p - 1) * (q - 1);
	printf("\ntoteint=%lf",phi);
	printf("\ne=%lf",e);
	while (e < phi) {
		// e must be co-prime to phi and
		// smaller than phi.
		if (gcd(e, phi) == 1)
			break;
		else
			e++;
	}

	// Private key (d stands for decrypt)
	// choosing d such that it satisfies
	// d*e = 1 + k * totient
	int k = 2; // A constant value
	double d = (1 + (k * phi)) / e;
	printf("\nd=%lf",d);

	// Message to be encrypted
	double msg;
    printf("\nEnter Data");
    scanf("%lf",&msg);
	printf("Message data = %lf", msg);

	// Encryption c = (msg ^ e) % n
	double c = pow(msg, e);
	c = fmod(c, n);
	printf("\nEncrypted data = %lf", c);

	// Decryption m = (c ^ d) % n
	double m = pow(c, d);
	m = fmod(m, n);
	printf("\nOriginal Message Sent = %lf", m);

	return 0;
}
// output:
// p=3.000000
// q=7.000000
// n=21.000000
// toteint=12.000000
// e=2.000000
// d=5.000000
// Enter Data10
// Message data = 10.000000
// Encrypted data = 19.000000
// Original Message Sent = 10.000000
